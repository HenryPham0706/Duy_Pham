
class Invoice {
  final String productName;
  final int quantity;
  final double unitPrice;


  Invoice({
    required this.productName,
    required this.quantity,
    required this.unitPrice,
  });


  double get subtotal => quantity * unitPrice;

  
  double get discountPercentage {
    if (subtotal >= 1000000.0) {
      return 0.10; 
    } else if (subtotal >= 500000.0) {
      return 0.05; 
      return 0.0; 
    }
  }

  
  double get discountAmount => subtotal * discountPercentage;


  double get amountAfterDiscount => subtotal - discountAmount;

  
  static const double vatRate = 0.08;

 
  double get vatAmount => amountAfterDiscount * vatRate;

  double get totalPayment => amountAfterDiscount + vatAmount;


  void printInvoice() {
    print('\n--- HÓA ĐƠN BÁN HÀNG ---');
    print('Tên sản phẩm:    $productName');
    print('Số lượng:        $quantity');
    print('Đơn giá:         ${_formatCurrency(unitPrice)} VNĐ');
    print('-------------------------');
    print('Thành tiền:      ${_formatCurrency(subtotal)} VNĐ');
    print('Giảm giá (${(discountPercentage * 100).toStringAsFixed(0)}%): ${_formatCurrency(discountAmount)} VNĐ');
    print('Tiền sau giảm giá: ${_formatCurrency(amountAfterDiscount)} VNĐ');
    print('Thuế VAT (${(vatRate * 100).toStringAsFixed(0)}%):  ${_formatCurrency(vatAmount)} VNĐ');
    print('-------------------------');
    print('TỔNG THANH TOÁN: ${_formatCurrency(totalPayment)} VNĐ');
    print('-------------------------');
  }

 
  String _formatCurrency(double amount) {
    final formatter = NumberFormat.currency(
      locale: 'vi_VN', 
      symbol: '', 
      decimalDigits: 0, 
    );
    return formatter.format(amount);
  }
}

String? _getUserInput(String prompt) {
  stdout.write(prompt);
  return stdin.readLineSync();
}


int _getIntegerInput(String prompt, {bool allowZero = false}) {
  int? value;
  while (value == null) {
    String? input = _getUserInput(prompt);
    if (input != null) {
      value = int.tryParse(input);
      if (value == null || value < 0 || (!allowZero && value == 0)) {
        print(
            'Giá trị không hợp lệ. Vui lòng nhập một số nguyên ${!allowZero ? 'dương' : 'không âm'}.');
        value = null;
      }
    } else {
      print('Không có giá trị nào được nhập. Vui lòng thử lại.');
      value = null; 
    }
  }
  return value;
}


double _getDoubleInput(String prompt, {bool allowZero = false}) {
  double? value;
  while (value == null) {
    String? input = _getUserInput(prompt);
    if (input != null) {
      value = double.tryParse(input);
      if (value == null || value < 0 || (!allowZero && value == 0.0)) {
        print(
            'Giá trị không hợp lệ. Vui lòng nhập một số ${!allowZero ? 'dương' : 'không âm'}.');
        value = null; 
      }
    } else {
      print('Không có giá trị nào được nhập. Vui lòng thử lại.');
      value = null;
    }
  }
  return value;
}


void main() {
  print('--- NHẬP THÔNG TIN HÓA ĐƠN ---');

  String productName;
  while (true) {
    String? input = _getUserInput('Nhập tên sản phẩm: ');
    if (input != null && input.trim().isNotEmpty) {
      productName = input.trim();
      break;
    } else {
      print('Tên sản phẩm không được để trống.');
    }
  }

  final int quantity = _getIntegerInput('Nhập số lượng mua: ');
  final double unitPrice = _getDoubleInput('Nhập đơn giá: ');

  final invoice = Invoice(
    productName: productName,
    quantity: quantity,
    unitPrice: unitPrice,
  );

  invoice.printInvoice();
}